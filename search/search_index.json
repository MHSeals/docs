{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Roboboat CS Documentation","text":"<p>docs.mhsroboboat.com is a subdomain hosting reference information for the Computer Science department of MHSeals. Beginners should check out the ROS2 and Setting up your Workspace pages.</p> <p>Help contribute to the documentation by adding a pull request to this website's github!</p>"},{"location":"archive/kiss_icp/","title":"kiss_icp","text":"<p>kiss_icp is an odometry pipeline 'that just works'. :3</p>"},{"location":"archive/kiss_icp/#installation","title":"installation","text":"<ol> <li>run <code>pip install kiss-icp</code></li> <li>that's it! you're done!</li> </ol>"},{"location":"archive/kiss_icp/#running-kiss_icp","title":"running kiss_icp","text":"<p>run <code>ros2 launch kiss_icp odometry.launch.py topic:=/wamv/sensors/lidars/lidar_wamv_sensor/points</code></p>"},{"location":"archive/mavros/","title":"MAVROS","text":""},{"location":"archive/mavros/#setmode","title":"SetMode","text":"<ul> <li>create a <code>mavros_msgs.srv.SetMode</code> client for the <code>/mavros/set_mode</code> topic<ul> <li>Mode options: <code>MANUAL</code>, <code>GUIDED</code>, <code>HOL</code></li> </ul> </li> </ul>"},{"location":"archive/mavros/#thrusters","title":"thrusters","text":"<ul> <li>publish a <code>geometry_msgs.msg.TwistStamped</code> message to the <code>/mavros/setpoint_velocity/cmd_vel</code> to control speed</li> </ul>"},{"location":"archive/mavros/#twiststamped-messages","title":"TwistStamped messages","text":"<p>ie. twist message named 'mymessage': - Linear velocity can be modified with <code>mymessage.twist.linear.[x(forwards)/y(backwards)]</code>     - measured in m/s - Angular velocity (rotating the boat) can be modified with <code>mymessage.twist.angular.z</code>     - mesured in rad/s</p>"},{"location":"archive/slam_toolbox/","title":"slam_toolbox","text":"<p>slam_toolbox is a package we use to implement the SLAM algorithm in roboboat :)</p> <p>bryan's documentation</p>"},{"location":"archive/slam_toolbox/#what-is-slam","title":"what is slam?","text":"<p>slam stands for Simultaneous Localization and Mapping\u2026 but what does that mean?! * localization: positioning yourself relative to a map without global positioning (like gps) * mapping: exploring surroundings and using the data to form a map * slam = localizing and mapping at the same time!</p>"},{"location":"archive/slam_toolbox/#how-to-use-slam_toolbox","title":"how to use slam_toolbox","text":"<ul> <li>slam_toolbox subscribers to data from <code>/tf</code> and <code>/scan</code></li> <li><code>/odom</code> and <code>/laser</code> topics need to be linked in the <code>/tf</code> tree</li> </ul>"},{"location":"archive/slam_toolbox/#installation","title":"installation","text":"<ol> <li>update your system <code>sudo apt update &amp;&amp; sudo apt upgrade</code></li> <li>install slam_toolbox <code>sudo apt install ros-humble-slam-toolbox</code></li> <li>build your packages <code>colcon build</code></li> </ol> <p>now you can run slam_toolbox with the code below! <code>ros2 launch slam_toolbox online_async_launch.py use_sim_time:=True</code> * this command runs slam_toolbox in online asynchronous mode</p>"},{"location":"archive/slam_toolbox/#configuration","title":"configuration","text":"<p>slam_toolbox comes with template default config files you can copy and modify this code below will copy one of the template files to your current working directory <code>cp /opt/ros/humble/share/slam_toolbox/config/mapper_params_online_async.yaml .</code></p>"},{"location":"archive/slam_toolbox/#rviz-and-slam_toolbox","title":"rviz and slam_toolbox","text":""},{"location":"archive/slam_toolbox/#view-slam_toolbox-data","title":"view slam_toolbox data","text":"<ol> <li>open rviz <code>ros2 launch vrx_gazebo rviz.launch.py</code></li> <li>add a laserscan node</li> <li>profit?</li> </ol>"},{"location":"archive/slam_toolbox/#slam_toolbox-rviz-plugin","title":"slam_toolbox rviz plugin","text":"<ol> <li>open rviz <code>ros2 launch vrx_gazebo rviz.launch.py</code></li> <li>Menu bar (top left corner) -&gt; Panels -&gt; Add New Panel</li> <li>You should now see the SlamToolboxPlugin panel in the list of panels!</li> </ol>"},{"location":"archive/sim/gazebo/","title":"gazebo","text":"<p>gazebo is a simulation program we use to test our boat! instead of taking out our boat every time we need to test code, we simply run gazebo! * at the time of writing (2024), we are using Gazebo Garden. this should come preinstalled with the docker installation</p>"},{"location":"archive/sim/gazebo/#how-to-use-gazebo","title":"how to use gazebo","text":"<p>launch gazebo using the command below: <code>ros2 launch vrx_gz competition.launch.py world:=sydney_regatta</code> once you open up gazebo, you'll probably be greeting with a frozen screen. don't worry, this is normal. give it a minute of two :]</p>"},{"location":"archive/sim/gazebo/#navigating-gazebo","title":"navigating gazebo","text":""},{"location":"archive/sim/gazebo/#toolbar","title":"toolbar","text":""},{"location":"archive/sim/gazebo/#main-view","title":"main view","text":""},{"location":"archive/sim/gazebo/#panels","title":"panels","text":"<ol> <li>click the 3 buttons on the top right corner</li> <li>type out the panel you want to add</li> <li>profit?</li> </ol>"},{"location":"archive/sim/tf2/","title":"tf2","text":"<p>TF2 = TransForm 2</p>"},{"location":"archive/sim/tf2/#links","title":"links","text":"<p>links =  parts of a robot (ie. Lidar, wheels, thrusters, and camera) links are joined together by joints</p>"},{"location":"archive/sim/tf2/#view-links-of-a-robot","title":"view links of a robot:","text":"<ol> <li>Open Rviz</li> <li>Select the robot from the left panel</li> <li>expand the \"links\" tab</li> </ol>"},{"location":"archive/sim/tf2/#positions-and-rotations","title":"positions and rotations","text":"<p>base_link is the origin of a robot, and all other parts of the robot are positioned relative to base_link (it is similar to classes and subclasses) arrows show hierarchy of the tree: the arrow points toward the parent - Red = X axis - Green = Y axis - Blue = Z axis ![[tf2-visual.png]]</p>"},{"location":"archive/sim/tf2/#the-tf-topic","title":"the /tf topic","text":""},{"location":"archive/sim/tf2/#tf2-tools","title":"tf2-tools","text":"<ul> <li>install via <code>sudo apt install ros-humble-tf2-tools</code></li> </ul>"},{"location":"archive/sim/tf2/#viewing-data","title":"viewing data","text":"<p><code>ros2 run tf2_tools view_frames</code> creates 2 files: PDF and URDF file PDF gives visual description of the tf2 'tree'</p>"},{"location":"archive/sim/urdf/","title":"URDF","text":"<p>URDF = Unified Robot Description Format - used to generate TFs</p>"},{"location":"archive/sim/urdf/#making-a-urdf-file","title":"making a urdf file","text":"<p>urdf files end with .urdf and are in XML format</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;robot name=\"myrobot\"&gt; \n    &lt;!-- your links and joints go here! --&gt;\n&lt;/robot&gt;\n</code></pre>"},{"location":"archive/sim/urdf/#link","title":"link","text":"<pre><code>&lt;link name=\"base_link\"&gt;\n    &lt;visual&gt; &lt;!-- physical properties --&gt;\n        &lt;geometry&gt;\n            &lt;box size=\".2 .4 .6\"/&gt; &lt;!-- in meters --&gt;\n        &lt;/geometry&gt;\n        &lt;origin xyz=\"0 0 0\" rpy=\"0 0 0\"/&gt;\n        &lt;material name=\"orange\"&gt;\n    &lt;/visual&gt;\n&lt;/link&gt;\n</code></pre> <ul> <li>visual = visual propertries of a link<ul> <li>you will need to include a geometry tag to create shapes<ul> <li>box size property: measured in meters, size in XYZ</li> <li>material name property: defines color</li> </ul> </li> <li>origin: defines the offset of the visual (geometry)<ul> <li>use joints to move a link relative to another instead</li> <li>XYZ - determines position</li> <li>RPY = Roll (X axis), Pitch (Y axis), Yaw (Z axis) - determines rotation</li> </ul> </li> </ul> </li> </ul>"},{"location":"archive/sim/urdf/#joint","title":"joint","text":"<pre><code>&lt;joint name=\"my_cool_joint\" type=\"fixed\"&gt;\n    &lt;parent link=\"mom\"/&gt;\n    &lt;child link=\"son\"/&gt;\n    &lt;origin xyz=\"0 0 0.5\" rpy=\"0 0 0\"/&gt;\n&lt;/joint&gt;\n</code></pre> <ul> <li>join property type:</li> <li>the origin tag here represents the child's offset relative to the parent</li> </ul>"},{"location":"hardware/network/","title":"WIFI network","text":"<p>alec this is ur job to fill out because i ddint do ANYTHINGS with the wifi and i do NOT want to mess around with it else it destory the boat Okay thanks bye :D</p>"},{"location":"hardware/vlp16/","title":"VLP-16 (LIDAR)","text":"<p>We are using the VLP-16 lidar puck.</p> <p>The VLP-16 lidar will be unused from roboboat years 2026 forward.</p>"},{"location":"hardware/vlp16/#how-to-set-up","title":"how to set up","text":"<p>The lidar outputs <code>sensor_msgs.msg.PointCloud2</code> messages to the <code>/wamv/sensors/lidars/lidar_wamv_sensor/points</code> topic</p>"},{"location":"hardware/vlp16/#pointcloud2-messages","title":"PointCloud2 messages","text":"<p>The (relevant) contents of a PointCloud2 message: - point_step - # of bytes in a point (msg type: uint32) - row_step - # of bytes in a row of points (msg type: uint32)     - calculated by (# of points in a row * point_step) - fields[] - this is similar to a structure in C++ (msg type <code>sensor_msgs/PointField</code>)</p>"},{"location":"hardware/vlp16/#pointfield","title":"PointField","text":"<p>A fields[] message looks something like this:</p> <pre><code>mypointcloud.fields = [\nPointField('x',0,PointField.FLOAT32,1)\nPointField('y',4,PointField.FLOAT32,1)\nPointField('z',8,PointField.FLOAT32,1)\nPointField('intensity',12,PointField.FLOAT32,1)\n</code></pre> <ul> <li>attribute: a name (such as x,y,z,intensity) </li> <li>offset: the start index</li> <li>datatype: </li> <li>count:</li> </ul>"},{"location":"setup/installing_ubuntu/","title":"Installing Ubuntu","text":""},{"location":"setup/installing_ubuntu/#prerequisites","title":"prerequisites","text":"<p>You will need:</p> <ul> <li>Spare USB drive with at least 8 gigabytes</li> <li>If you don't have this, you can ask alec, ryan, or tuyet (thats me!) to do it for you</li> <li>A laptop with:<ul> <li>at least 16 gigabytes of ram</li> <li>a port to connect your USB drive into</li> </ul> </li> </ul>"},{"location":"setup/installing_ubuntu/#installation","title":"installation","text":"<ol> <li>Download Ventoy on your USB drive<ul> <li>Linux users: install the .tar.gz file and run <code>tar -xvf {.tar.gz file here}</code> to extract the file contents</li> <li>Windows users: install and extract the .zip file</li> </ul> </li> <li>Install the desktop version of Ubuntu 22.04</li> <li>Move the .iso file to the usb drive</li> <li>Boot into the BIOS and Disable Secure Boot<ol> <li>Restart your laptop and mash the F10, F11, and F12 buttons to boot into your BIOS</li> <li>Turn secure boot off (will probably be in the boot menu)</li> </ol> </li> <li>Boot into your USB drive and select the iso file</li> <li>Follow the installation process and DO NOT TURN OFF YOUR LAPTOP</li> <li>after the installation, reboot into your BIOS and enable Secure Boot</li> </ol>"},{"location":"setup/installing_ubuntu/#partitioning","title":"partitioning","text":"<p>if you are completely removing windows and switching to ubuntu, you can just select the \"wipe hard drive\" option. ubuntu will automatically partition your hard drive for you</p>"},{"location":"setup/workspace_setup/","title":"Workspace setup","text":""},{"location":"setup/workspace_setup/#prerequisites","title":"prerequisites","text":"<ul> <li>Ubuntu 22.04 (see installing ubuntu 22.04) -- NO WSL!</li> <li>All the instructions below are made for both Ubuntu 22.04 and 20.04</li> <li>At least 8 gigabytes of ram</li> </ul>"},{"location":"setup/workspace_setup/#setup","title":"setup","text":"<ol> <li>Follow the instructions for install ros2 on your system at the official website docs.ros.org</li> <li>create a new directory (<code>mkdir roboboat_ws</code>)</li> <li>enter into directory, run <code>colcon build</code></li> <li>create a src folder (<code>mkdir src</code>)</li> <li>install packages in the src directory<ol> <li>mhsboat_ctrl -- <code>git clone https://github.com/MHSeals/mhsboat_ctrl</code></li> </ol> </li> </ol> <p>your basic workspace should have a tree similar to this when you are finished:</p> <pre><code>- roboboat_ws\n  - build\n  - install\n  - log\n  - src\n    - mhsboat_ctrl\n</code></pre>"},{"location":"starting/basic_commands/","title":"Basic commands","text":""},{"location":"starting/how2read/","title":"How to read documentation","text":""},{"location":"starting/how2read/#reading-topics","title":"reading topics","text":"<p>example link to sensors_msgs/PointField topic message</p>"},{"location":"starting/ros2/","title":"ROS 2","text":"<p>ros, short for Robot Operating System, is not an operating system. ros is a set of software libraries and tools built to help people like us make software for robots! ros2 is an improvement on ros1.</p> <p>at the time of writing (October 2024), we are using ros2 humble.</p>"},{"location":"starting/ros2/#how-does-ros2-work","title":"how does ros2 work?","text":""},{"location":"starting/ros2/#the-ros2-graph","title":"the ros2 graph","text":""},{"location":"starting/ros2/#nodes","title":"nodes","text":"<p>ros2 is built on a structure of nodes: a node is an executeable program that can perform tasks and operations. these nodes can communicate with each other using topics or services. for more information on nodes, check here.</p>"},{"location":"starting/ros2/#topics-publishers-and-subscribers","title":"topics, publishers and subscribers","text":"<p>a publisher sends a message to a topic, and subscribers listening to that topic will receive that information.</p> <p>there is no limit on how many topics you can publish and subscribe to (or make!)</p>"},{"location":"starting/ros2/#services-servers-and-clients","title":"services, servers, and clients","text":"<p>a service client sends a request to a server, and the server returns a response to the client.</p>"},{"location":"starting/ros2/#actions","title":"actions","text":"<p> 3 parts of an action:</p> <ul> <li>goal</li> <li>feedback</li> <li>result</li> </ul>"},{"location":"starting/ros2/#packages","title":"packages","text":"<p>a package is just a synonym for a piece of software. they're composed of folders containing scripts, launch files, and configuration files. to update all your packages, run <code>colcon build</code> in your root directory. this command will create folders such as <code>build</code>, <code>install</code>, and <code>log</code>.</p>"},{"location":"starting/ros2/#where-do-i-go-from-here","title":"where do i go from here?","text":"<p>now that you understand how ros2 works, you can learn how to use some software that we use along with ros2.</p> <p>if you're not ready to get started with programming, you can also help expand this documentation by making pull requests!</p>"},{"location":"website/","title":"MHS Seals Website Documentation","text":"<p>Author: Alec Jensen</p> <p>The website is available at mhsroboboat.com.</p>"},{"location":"website/#local-development","title":"Local Development","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>bash    git clone https://github.com/MHSeals/website2025.git    cd website2025</code></p> <ol> <li> <p>Install dependencies:    <code>bash    npm install</code></p> </li> <li> <p>Start the development server:    <code>bash    npm run dev</code></p> </li> <li> <p>Open your browser and navigate to <code>http://localhost:4321</code> to view the site.</p> </li> </ol>"},{"location":"website/#pushing-changes","title":"Pushing Changes","text":"<p>The website is (as of me writing this) hosted on Cloudflare Pages (on my account, I need to move it to the organization's account), which automatically deploys changes pushed to the <code>main</code> branch of this repository. Because of this, the main branch is protected and requires pull requests to be merged. So you must either fork the repository or create a branch to make changes.</p> <ol> <li> <p>Create a new branch:    <code>bash    git checkout -b my-feature-branch</code></p> </li> <li> <p>Make your changes and commit them:    <code>bash    git add .    git commit -m \"Description of my changes\"</code></p> </li> <li> <p>Push your branch to the remote repository:    <code>bash    git push origin my-feature-branch</code></p> </li> <li> <p>Open a pull request on GitHub to merge your changes into the <code>main</code> branch.</p> </li> <li>Once the pull request is approved and merged, your changes will be automatically deployed to the live site.</li> </ol>"},{"location":"website/#previous-year-pages","title":"Previous Year Pages","text":"<p>The website contains pages for previous years, so you can go back and look at the history of the team. These previous year pages are separate deployments on Cloudflare Pages, and are based on specific branches in this repository. The branches are named <code>2025</code>, <code>2025</code>, etc., and the deployments are available at 2025.mhsroboboat.com, 2024.mhsroboboat.com, etc.</p>"},{"location":"website/#adding-a-new-year-page-to-the-website","title":"Adding a New Year Page to the Website","text":"<ol> <li>In GitHub, after competition season ends, create a new branch for the next year, e.g., <code>2025</code>.</li> <li>In Cloudflare Pages, create a new application<ol> <li>Select <code>Import a repository</code></li> <li>Select the repository <code>MHSeals/website2025</code></li> <li>Go to the application settings</li> <li>Set the production branch to the new branch you created, e.g., <code>2025</code></li> </ol> </li> <li>Make sure the DNS is set up correctly for the new year page (Cloudflare Pages should handle this automatically).</li> <li>Navigate to <code>src\\pages\\year\\[year].astro</code></li> <li>Find <code>export function getStaticPaths()</code></li> <li>Add an object to the return, like this: <code>{ params: { year: \"2025\" }},</code>    replacing <code>2025</code> with the year you want to add.</li> </ol> <p>Example:    <code>javascript     export function getStaticPaths() {          return [               { params: { year: \"2025\" }},               { params: { year: \"2024\" }},               // Add more years as needed          ];     }</code> 7. Follow the steps in the \"Pushing Changes\" section to create a pull request and deploy the changes.</p>"}]}