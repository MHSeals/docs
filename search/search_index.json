{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Roboboat CS Documentation docs.mhsroboboat.com is a subdomain hosting reference information for the Computer Science department of MHSeals. Beginners should check out the ROS2 and Setting up your Workspace pages. Help contribute to the documentation by adding a pull request to this website's github !","title":"Roboboat CS Documentation"},{"location":"#roboboat-cs-documentation","text":"docs.mhsroboboat.com is a subdomain hosting reference information for the Computer Science department of MHSeals. Beginners should check out the ROS2 and Setting up your Workspace pages. Help contribute to the documentation by adding a pull request to this website's github !","title":"Roboboat CS Documentation"},{"location":"archive/kiss_icp/","text":"kiss_icp kiss_icp is an odometry pipeline 'that just works'. :3 installation run pip install kiss-icp that's it! you're done! running kiss_icp run ros2 launch kiss_icp odometry.launch.py topic:=/wamv/sensors/lidars/lidar_wamv_sensor/points","title":"kiss_icp"},{"location":"archive/kiss_icp/#kiss_icp","text":"kiss_icp is an odometry pipeline 'that just works'. :3","title":"kiss_icp"},{"location":"archive/kiss_icp/#installation","text":"run pip install kiss-icp that's it! you're done!","title":"installation"},{"location":"archive/kiss_icp/#running-kiss_icp","text":"run ros2 launch kiss_icp odometry.launch.py topic:=/wamv/sensors/lidars/lidar_wamv_sensor/points","title":"running kiss_icp"},{"location":"archive/mavros/","text":"MAVROS SetMode create a mavros_msgs.srv.SetMode client for the /mavros/set_mode topic Mode options: MANUAL , GUIDED , HOL thrusters publish a geometry_msgs.msg.TwistStamped message to the /mavros/setpoint_velocity/cmd_vel to control speed TwistStamped messages ie. twist message named 'mymessage': - Linear velocity can be modified with mymessage.twist.linear.[x(forwards)/y(backwards)] - measured in m/s - Angular velocity (rotating the boat) can be modified with mymessage.twist.angular.z - mesured in rad/s","title":"MAVROS"},{"location":"archive/mavros/#mavros","text":"","title":"MAVROS"},{"location":"archive/mavros/#setmode","text":"create a mavros_msgs.srv.SetMode client for the /mavros/set_mode topic Mode options: MANUAL , GUIDED , HOL","title":"SetMode"},{"location":"archive/mavros/#thrusters","text":"publish a geometry_msgs.msg.TwistStamped message to the /mavros/setpoint_velocity/cmd_vel to control speed","title":"thrusters"},{"location":"archive/mavros/#twiststamped-messages","text":"ie. twist message named 'mymessage': - Linear velocity can be modified with mymessage.twist.linear.[x(forwards)/y(backwards)] - measured in m/s - Angular velocity (rotating the boat) can be modified with mymessage.twist.angular.z - mesured in rad/s","title":"TwistStamped messages"},{"location":"archive/slam_toolbox/","text":"slam_toolbox slam_toolbox is a package we use to implement the SLAM algorithm in roboboat :) bryan's documentation what is slam? slam stands for Simultaneous Localization and Mapping\u2026 but what does that mean?! * localization : positioning yourself relative to a map without global positioning (like gps) * mapping : exploring surroundings and using the data to form a map * slam = localizing and mapping at the same time! how to use slam_toolbox slam_toolbox subscribers to data from /tf and /scan /odom and /laser topics need to be linked in the /tf tree installation update your system sudo apt update && sudo apt upgrade install slam_toolbox sudo apt install ros-humble-slam-toolbox build your packages colcon build now you can run slam_toolbox with the code below! ros2 launch slam_toolbox online_async_launch.py use_sim_time:=True * this command runs slam_toolbox in online asynchronous mode configuration slam_toolbox comes with template default config files you can copy and modify this code below will copy one of the template files to your current working directory cp /opt/ros/humble/share/slam_toolbox/config/mapper_params_online_async.yaml . rviz and slam_toolbox view slam_toolbox data open rviz ros2 launch vrx_gazebo rviz.launch.py add a laserscan node profit? slam_toolbox rviz plugin open rviz ros2 launch vrx_gazebo rviz.launch.py Menu bar (top left corner) -> Panels -> Add New Panel You should now see the SlamToolboxPlugin panel in the list of panels!","title":"slam_toolbox"},{"location":"archive/slam_toolbox/#slam_toolbox","text":"slam_toolbox is a package we use to implement the SLAM algorithm in roboboat :) bryan's documentation","title":"slam_toolbox"},{"location":"archive/slam_toolbox/#what-is-slam","text":"slam stands for Simultaneous Localization and Mapping\u2026 but what does that mean?! * localization : positioning yourself relative to a map without global positioning (like gps) * mapping : exploring surroundings and using the data to form a map * slam = localizing and mapping at the same time!","title":"what is slam?"},{"location":"archive/slam_toolbox/#how-to-use-slam_toolbox","text":"slam_toolbox subscribers to data from /tf and /scan /odom and /laser topics need to be linked in the /tf tree","title":"how to use slam_toolbox"},{"location":"archive/slam_toolbox/#installation","text":"update your system sudo apt update && sudo apt upgrade install slam_toolbox sudo apt install ros-humble-slam-toolbox build your packages colcon build now you can run slam_toolbox with the code below! ros2 launch slam_toolbox online_async_launch.py use_sim_time:=True * this command runs slam_toolbox in online asynchronous mode","title":"installation"},{"location":"archive/slam_toolbox/#configuration","text":"slam_toolbox comes with template default config files you can copy and modify this code below will copy one of the template files to your current working directory cp /opt/ros/humble/share/slam_toolbox/config/mapper_params_online_async.yaml .","title":"configuration"},{"location":"archive/slam_toolbox/#rviz-and-slam_toolbox","text":"","title":"rviz and slam_toolbox"},{"location":"archive/slam_toolbox/#view-slam_toolbox-data","text":"open rviz ros2 launch vrx_gazebo rviz.launch.py add a laserscan node profit?","title":"view slam_toolbox data"},{"location":"archive/slam_toolbox/#slam_toolbox-rviz-plugin","text":"open rviz ros2 launch vrx_gazebo rviz.launch.py Menu bar (top left corner) -> Panels -> Add New Panel You should now see the SlamToolboxPlugin panel in the list of panels!","title":"slam_toolbox rviz plugin"},{"location":"archive/sim/gazebo/","text":"gazebo gazebo is a simulation program we use to test our boat! instead of taking out our boat every time we need to test code, we simply run gazebo! * at the time of writing (2024), we are using Gazebo Garden. this should come preinstalled with the docker installation how to use gazebo launch gazebo using the command below: ros2 launch vrx_gz competition.launch.py world:=sydney_regatta once you open up gazebo, you'll probably be greeting with a frozen screen. don't worry, this is normal. give it a minute of two :] navigating gazebo toolbar main view panels click the 3 buttons on the top right corner type out the panel you want to add profit?","title":"Gazebo"},{"location":"archive/sim/gazebo/#gazebo","text":"gazebo is a simulation program we use to test our boat! instead of taking out our boat every time we need to test code, we simply run gazebo! * at the time of writing (2024), we are using Gazebo Garden. this should come preinstalled with the docker installation","title":"gazebo"},{"location":"archive/sim/gazebo/#how-to-use-gazebo","text":"launch gazebo using the command below: ros2 launch vrx_gz competition.launch.py world:=sydney_regatta once you open up gazebo, you'll probably be greeting with a frozen screen. don't worry, this is normal. give it a minute of two :]","title":"how to use gazebo"},{"location":"archive/sim/gazebo/#navigating-gazebo","text":"","title":"navigating gazebo"},{"location":"archive/sim/gazebo/#toolbar","text":"","title":"toolbar"},{"location":"archive/sim/gazebo/#main-view","text":"","title":"main view"},{"location":"archive/sim/gazebo/#panels","text":"click the 3 buttons on the top right corner type out the panel you want to add profit?","title":"panels"},{"location":"archive/sim/tf2/","text":"tf2 TF2 = TransForm 2 links links = parts of a robot (ie. Lidar, wheels, thrusters, and camera) links are joined together by joints view links of a robot: Open Rviz Select the robot from the left panel expand the \"links\" tab positions and rotations base_link is the origin of a robot, and all other parts of the robot are positioned relative to base_link (it is similar to classes and subclasses) arrows show hierarchy of the tree: the arrow points toward the parent - Red = X axis - Green = Y axis - Blue = Z axis ![[tf2-visual.png]] the /tf topic tf2-tools install via sudo apt install ros-humble-tf2-tools viewing data ros2 run tf2_tools view_frames creates 2 files: PDF and URDF file PDF gives visual description of the tf2 'tree'","title":"tf2"},{"location":"archive/sim/tf2/#tf2","text":"TF2 = TransForm 2","title":"tf2"},{"location":"archive/sim/tf2/#links","text":"links = parts of a robot (ie. Lidar, wheels, thrusters, and camera) links are joined together by joints","title":"links"},{"location":"archive/sim/tf2/#view-links-of-a-robot","text":"Open Rviz Select the robot from the left panel expand the \"links\" tab","title":"view links of a robot:"},{"location":"archive/sim/tf2/#positions-and-rotations","text":"base_link is the origin of a robot, and all other parts of the robot are positioned relative to base_link (it is similar to classes and subclasses) arrows show hierarchy of the tree: the arrow points toward the parent - Red = X axis - Green = Y axis - Blue = Z axis ![[tf2-visual.png]]","title":"positions and rotations"},{"location":"archive/sim/tf2/#the-tf-topic","text":"","title":"the /tf topic"},{"location":"archive/sim/tf2/#tf2-tools","text":"install via sudo apt install ros-humble-tf2-tools","title":"tf2-tools"},{"location":"archive/sim/tf2/#viewing-data","text":"ros2 run tf2_tools view_frames creates 2 files: PDF and URDF file PDF gives visual description of the tf2 'tree'","title":"viewing data"},{"location":"archive/sim/urdf/","text":"URDF = Unified Robot Description Format - used to generate TFs making a urdf file urdf files end with .urdf and are in XML format <?xml version=\"1.0\"?> <robot name=\"myrobot\"> <!-- your links and joints go here! --> </robot> link <link name=\"base_link\"> <visual> <!-- physical properties --> <geometry> <box size=\".2 .4 .6\"/> <!-- in meters --> </geometry> <origin xyz=\"0 0 0\" rpy=\"0 0 0\"/> <material name=\"orange\"> </visual> </link> visual = visual propertries of a link you will need to include a geometry tag to create shapes box size property: measured in meters, size in XYZ material name property: defines color origin: defines the offset of the visual (geometry) use joints to move a link relative to another instead XYZ - determines position RPY = Roll (X axis), Pitch (Y axis), Yaw (Z axis) - determines rotation joint <joint name=\"my_cool_joint\" type=\"fixed\"> <parent link=\"mom\"/> <child link=\"son\"/> <origin xyz=\"0 0 0.5\" rpy=\"0 0 0\"/> </joint> join property type: the origin tag here represents the child's offset relative to the parent","title":"URDF"},{"location":"archive/sim/urdf/#making-a-urdf-file","text":"urdf files end with .urdf and are in XML format <?xml version=\"1.0\"?> <robot name=\"myrobot\"> <!-- your links and joints go here! --> </robot>","title":"making a urdf file"},{"location":"archive/sim/urdf/#link","text":"<link name=\"base_link\"> <visual> <!-- physical properties --> <geometry> <box size=\".2 .4 .6\"/> <!-- in meters --> </geometry> <origin xyz=\"0 0 0\" rpy=\"0 0 0\"/> <material name=\"orange\"> </visual> </link> visual = visual propertries of a link you will need to include a geometry tag to create shapes box size property: measured in meters, size in XYZ material name property: defines color origin: defines the offset of the visual (geometry) use joints to move a link relative to another instead XYZ - determines position RPY = Roll (X axis), Pitch (Y axis), Yaw (Z axis) - determines rotation","title":"link"},{"location":"archive/sim/urdf/#joint","text":"<joint name=\"my_cool_joint\" type=\"fixed\"> <parent link=\"mom\"/> <child link=\"son\"/> <origin xyz=\"0 0 0.5\" rpy=\"0 0 0\"/> </joint> join property type: the origin tag here represents the child's offset relative to the parent","title":"joint"},{"location":"hardware/network/","text":"WIFI network alec this is ur job to fill out because i ddint do ANYTHINGS with the wifi and i do NOT want to mess around with it else it destory the boat Okay thanks bye :D","title":"WIFI Network"},{"location":"hardware/network/#wifi-network","text":"alec this is ur job to fill out because i ddint do ANYTHINGS with the wifi and i do NOT want to mess around with it else it destory the boat Okay thanks bye :D","title":"WIFI network"},{"location":"hardware/vlp16/","text":"VLP-16 (LIDAR) We are using the VLP-16 lidar puck. The VLP-16 lidar will be unused from roboboat years 2026 forward. how to set up The lidar outputs sensor_msgs.msg.PointCloud2 messages to the /wamv/sensors/lidars/lidar_wamv_sensor/points topic PointCloud2 messages The (relevant) contents of a PointCloud2 message: - point_step - # of bytes in a point (msg type: uint32) - row_step - # of bytes in a row of points (msg type: uint32) - calculated by (# of points in a row * point_step) - fields[] - this is similar to a structure in C++ (msg type sensor_msgs/PointField ) PointField A fields[] message looks something like this: mypointcloud.fields = [ PointField('x',0,PointField.FLOAT32,1) PointField('y',4,PointField.FLOAT32,1) PointField('z',8,PointField.FLOAT32,1) PointField('intensity',12,PointField.FLOAT32,1) attribute: a name (such as x,y,z,intensity) offset: the start index datatype: count:","title":"VLP-16 (LIDAR)"},{"location":"hardware/vlp16/#vlp-16-lidar","text":"We are using the VLP-16 lidar puck. The VLP-16 lidar will be unused from roboboat years 2026 forward.","title":"VLP-16 (LIDAR)"},{"location":"hardware/vlp16/#how-to-set-up","text":"The lidar outputs sensor_msgs.msg.PointCloud2 messages to the /wamv/sensors/lidars/lidar_wamv_sensor/points topic","title":"how to set up"},{"location":"hardware/vlp16/#pointcloud2-messages","text":"The (relevant) contents of a PointCloud2 message: - point_step - # of bytes in a point (msg type: uint32) - row_step - # of bytes in a row of points (msg type: uint32) - calculated by (# of points in a row * point_step) - fields[] - this is similar to a structure in C++ (msg type sensor_msgs/PointField )","title":"PointCloud2 messages"},{"location":"hardware/vlp16/#pointfield","text":"A fields[] message looks something like this: mypointcloud.fields = [ PointField('x',0,PointField.FLOAT32,1) PointField('y',4,PointField.FLOAT32,1) PointField('z',8,PointField.FLOAT32,1) PointField('intensity',12,PointField.FLOAT32,1) attribute: a name (such as x,y,z,intensity) offset: the start index datatype: count:","title":"PointField"},{"location":"setup/installing_ubuntu/","text":"Installing Ubuntu prerequisites You will need: Spare USB drive with at least 8 gigabytes If you don't have this, you can ask alec, ryan, or tuyet (thats me!) to do it for you A laptop with: at least 16 gigabytes of ram a port to connect your USB drive into installation Download Ventoy on your USB drive Linux users: install the .tar.gz file and run tar -xvf {.tar.gz file here} to extract the file contents Windows users: install and extract the .zip file Install the desktop version of Ubuntu 22.04 Move the .iso file to the usb drive Boot into the BIOS and Disable Secure Boot Restart your laptop and mash the F10, F11, and F12 buttons to boot into your BIOS Turn secure boot off (will probably be in the boot menu) Boot into your USB drive and select the iso file Follow the installation process and DO NOT TURN OFF YOUR LAPTOP after the installation, reboot into your BIOS and enable Secure Boot partitioning if you are completely removing windows and switching to ubuntu, you can just select the \"wipe hard drive\" option. ubuntu will automatically partition your hard drive for you","title":"Installing Ubuntu"},{"location":"setup/installing_ubuntu/#installing-ubuntu","text":"","title":"Installing Ubuntu"},{"location":"setup/installing_ubuntu/#prerequisites","text":"You will need: Spare USB drive with at least 8 gigabytes If you don't have this, you can ask alec, ryan, or tuyet (thats me!) to do it for you A laptop with: at least 16 gigabytes of ram a port to connect your USB drive into","title":"prerequisites"},{"location":"setup/installing_ubuntu/#installation","text":"Download Ventoy on your USB drive Linux users: install the .tar.gz file and run tar -xvf {.tar.gz file here} to extract the file contents Windows users: install and extract the .zip file Install the desktop version of Ubuntu 22.04 Move the .iso file to the usb drive Boot into the BIOS and Disable Secure Boot Restart your laptop and mash the F10, F11, and F12 buttons to boot into your BIOS Turn secure boot off (will probably be in the boot menu) Boot into your USB drive and select the iso file Follow the installation process and DO NOT TURN OFF YOUR LAPTOP after the installation, reboot into your BIOS and enable Secure Boot","title":"installation"},{"location":"setup/installing_ubuntu/#partitioning","text":"if you are completely removing windows and switching to ubuntu, you can just select the \"wipe hard drive\" option. ubuntu will automatically partition your hard drive for you","title":"partitioning"},{"location":"setup/workspace_setup/","text":"Workspace setup prerequisites Ubuntu 22.04 (see installing ubuntu 22.04 ) -- NO WSL! All the instructions below are made for both Ubuntu 22.04 and 20.04 At least 8 gigabytes of ram setup Follow the instructions for install ros2 on your system at the official website docs.ros.org create a new directory ( mkdir roboboat_ws ) enter into directory, run colcon build create a src folder ( mkdir src ) install packages in the src directory mhsboat_ctrl -- git clone https://github.com/MHSeals/mhsboat_ctrl your basic workspace should have a tree similar to this when you are finished: - roboboat_ws - build - install - log - src - mhsboat_ctrl","title":"Workspace setup"},{"location":"setup/workspace_setup/#workspace-setup","text":"","title":"Workspace setup"},{"location":"setup/workspace_setup/#prerequisites","text":"Ubuntu 22.04 (see installing ubuntu 22.04 ) -- NO WSL! All the instructions below are made for both Ubuntu 22.04 and 20.04 At least 8 gigabytes of ram","title":"prerequisites"},{"location":"setup/workspace_setup/#setup","text":"Follow the instructions for install ros2 on your system at the official website docs.ros.org create a new directory ( mkdir roboboat_ws ) enter into directory, run colcon build create a src folder ( mkdir src ) install packages in the src directory mhsboat_ctrl -- git clone https://github.com/MHSeals/mhsboat_ctrl your basic workspace should have a tree similar to this when you are finished: - roboboat_ws - build - install - log - src - mhsboat_ctrl","title":"setup"},{"location":"starting/basic_commands/","text":"Basic commands","title":"Basic commands"},{"location":"starting/basic_commands/#basic-commands","text":"","title":"Basic commands"},{"location":"starting/how2read/","text":"How to read documentation reading topics example link to sensors_msgs/PointField topic message","title":"How2read docs"},{"location":"starting/how2read/#how-to-read-documentation","text":"","title":"How to read documentation"},{"location":"starting/how2read/#reading-topics","text":"example link to sensors_msgs/PointField topic message","title":"reading topics"},{"location":"starting/ros2/","text":"ROS 2 ros, short for Robot Operating System, is not an operating system. ros is a set of software libraries and tools built to help people like us make software for robots! ros2 is an improvement on ros1. at the time of writing (October 2024), we are using ros2 humble. how does ros2 work? the ros2 graph nodes ros2 is built on a structure of nodes: a node is an executeable program that can perform tasks and operations. these nodes can communicate with each other using topics or services. for more information on nodes, check here . topics, publishers and subscribers a publisher sends a message to a topic, and subscribers listening to that topic will receive that information. there is no limit on how many topics you can publish and subscribe to (or make!) services, servers, and clients a service client sends a request to a server, and the server returns a response to the client. actions 3 parts of an action: goal feedback result packages a package is just a synonym for a piece of software. they're composed of folders containing scripts, launch files, and configuration files. to update all your packages, run colcon build in your root directory. this command will create folders such as build , install , and log . where do i go from here? now that you understand how ros2 works, you can learn how to use some software that we use along with ros2. if you're not ready to get started with programming, you can also help expand this documentation by making pull requests!","title":"ROS2"},{"location":"starting/ros2/#ros-2","text":"ros, short for Robot Operating System, is not an operating system. ros is a set of software libraries and tools built to help people like us make software for robots! ros2 is an improvement on ros1. at the time of writing (October 2024), we are using ros2 humble.","title":"ROS 2"},{"location":"starting/ros2/#how-does-ros2-work","text":"","title":"how does ros2 work?"},{"location":"starting/ros2/#the-ros2-graph","text":"","title":"the ros2 graph"},{"location":"starting/ros2/#nodes","text":"ros2 is built on a structure of nodes: a node is an executeable program that can perform tasks and operations. these nodes can communicate with each other using topics or services. for more information on nodes, check here .","title":"nodes"},{"location":"starting/ros2/#topics-publishers-and-subscribers","text":"a publisher sends a message to a topic, and subscribers listening to that topic will receive that information. there is no limit on how many topics you can publish and subscribe to (or make!)","title":"topics, publishers and subscribers"},{"location":"starting/ros2/#services-servers-and-clients","text":"a service client sends a request to a server, and the server returns a response to the client.","title":"services, servers, and clients"},{"location":"starting/ros2/#actions","text":"3 parts of an action: goal feedback result","title":"actions"},{"location":"starting/ros2/#packages","text":"a package is just a synonym for a piece of software. they're composed of folders containing scripts, launch files, and configuration files. to update all your packages, run colcon build in your root directory. this command will create folders such as build , install , and log .","title":"packages"},{"location":"starting/ros2/#where-do-i-go-from-here","text":"now that you understand how ros2 works, you can learn how to use some software that we use along with ros2. if you're not ready to get started with programming, you can also help expand this documentation by making pull requests!","title":"where do i go from here?"}]}